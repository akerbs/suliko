import React, { useState } from "react"
import "./layout.css"
import { makeStyles } from "@material-ui/core/styles"
import Button from "@material-ui/core/Button"
import {
  MuiPickersUtilsProvider,
  TimePicker,
  DatePicker,
} from "@material-ui/pickers"
import DateFnsUtils from "@date-io/date-fns"
import Modal from "@material-ui/core/Modal"
import Timeline from "@material-ui/lab/Timeline"
import TimelineItem from "@material-ui/lab/TimelineItem"
import TimelineSeparator from "@material-ui/lab/TimelineSeparator"
import TimelineConnector from "@material-ui/lab/TimelineConnector"
import TimelineContent from "@material-ui/lab/TimelineContent"
import TimelineDot from "@material-ui/lab/TimelineDot"
import TimelineOppositeContent from "@material-ui/lab/TimelineOppositeContent"
import PeopleIcon from "@material-ui/icons/People"
import EventIcon from "@material-ui/icons/Event"
import PhoneIcon from "@material-ui/icons/Phone"
import AlternateEmailIcon from "@material-ui/icons/AlternateEmail"
import PersonIcon from "@material-ui/icons/Person"
import ScheduleIcon from "@material-ui/icons/Schedule"
import InputLabel from "@material-ui/core/InputLabel"
import MenuItem from "@material-ui/core/MenuItem"
import FormControl from "@material-ui/core/FormControl"
import Select from "@material-ui/core/Select"
import TextField from "@material-ui/core/TextField"
// import Checkbox from "@material-ui/core/Checkbox"
import bgPatternImg from "../images/bgPatternImg.png"
import Snackbar from "@material-ui/core/Snackbar"

const useStyles = makeStyles(theme => ({
  modalWrapper: {
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
  },
  paper: {
    overflowX: "hidden",
    [theme.breakpoints.down("xs")]: {
      overflowY: "scroll",
    },

    maxHeight: " 100vh",
    width: 320,
    backgroundImage: `url(${bgPatternImg}) `,

    // backgroundColor: theme.palette.background.paper,
    border: "2px solid rgba(133,26,29)",
    boxShadow: theme.shadows[5],
    padding: theme.spacing(3, 0, 1, 0),
    zIndex: 9999,
    position: "fixed",
    outline: 0,
  },
  timeline: {
    margin: 0,
    padding: 0,
  },
  timelineItem: {
    margin: 0,
    padding: 0,
  },
  formControl: {
    margin: theme.spacing(0),
    minWidth: 185,
  },
}))

const emailRegex = RegExp(
  /^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/
)

const formValid = formErrors => {
  let valid = true

  Object.values(formErrors).forEach(val => {
    val.length > 0 && (valid = false)
  })
  return valid
}

const ModalWindow = props => {
  const classes = useStyles()
  const [state, setState] = useState({
    peopleCount: null,
    date: null,
    time: null,
    fullname: null,
    phone: null,
    email: null,
    formErrors: {
      peopleCount: "",
      fullname: "",
      phone: "",
      email: "",
    },
  })
  const [selectedDate, handleDateChange] = React.useState(new Date())
  const [openSb, setOpenSb] = React.useState(false)

  const changeHandler = event => {
    event.preventDefault()
    // setState({ ...state, [event.target.name]: event.target.value })
    const { name, value } = event.target
    let formErrors = state.formErrors

    console.log("vame: ", name)
    console.log("value: ", value)

    switch (name) {
      case "peopleCount":
        formErrors.fullname = !value.length ? "select the number of guests" : ""
        break
      case "fullname":
        formErrors.fullname =
          value.length < 3 && value.length > 0
            ? "minimum 3 characters required"
            : ""
        break
      case "phone":
        formErrors.fullname =
          value.length < 8 && value.length > 0
            ? "enter a valid phone number"
            : ""
        break
      case "email":
        formErrors.fullname =
          emailRegex.test(value) && value.length < 3 && value.length > 0
            ? ""
            : "enter a valid email address"
        break
      default:
        break
    }

    setState({ formErrors, [name]: value })
  }

  const handleClick = () => {
    setOpenSb(true)
  }
  const handleClose = (event, reason) => {
    if (reason === "clickaway") {
      return
    }
    setOpenSb(false)
  }

  const handleSubmit = event => {
    event.preventDefault()

    if (formValid(state.formErrors)) {
      console.log("success!")
    } else {
      console.error("form invalid, error")
    }
  }

  return (
    <Modal
      className={classes.modalWrapper}
      onClose={props.onClose}
      open={props.open}
    >
      <div className={classes.paper}>
        <form
          method="post"
          action="https://suliko-mailer.herokuapp.com/reservation"
          onSubmit={handleSubmit}
          noValidate
        >
          <div>
            {/* <Button onClick={handleClick}>Open simple snackbar</Button> */}
            <Snackbar
              anchorOrigin={{
                vertical: "bottom",
                horizontal: "left",
              }}
              open={openSb}
              autoHideDuration={2000}
              onClose={handleClose}
              message="Note archived"
            />
          </div>
          <MuiPickersUtilsProvider utils={DateFnsUtils}>
            <Timeline className={classes.timeline}>
              <TimelineItem
                className={classes.timelineItem}
                // style={{ marginBottom: 5 }}
              >
                <TimelineOppositeContent
                  style={{ flex: 0 }}
                ></TimelineOppositeContent>
                <TimelineSeparator>
                  <TimelineDot color="primary">
                    <PeopleIcon />
                  </TimelineDot>
                  <TimelineConnector />
                </TimelineSeparator>
                <TimelineContent>
                  <FormControl className={classes.formControl}>
                    <InputLabel id="demo-simple-select-label">
                      People
                    </InputLabel>
                    <Select
                      name="peopleCount"
                      id="peopleCount"
                      labelId="demo-simple-select-label"
                      value={state.peopleCount}
                      onChange={changeHandler}
                      noValidate
                    >
                      <MenuItem value={1}>1</MenuItem>
                      <MenuItem value={2}>2</MenuItem>
                      <MenuItem value={3}>3</MenuItem>
                      <MenuItem value={4}>4</MenuItem>
                      <MenuItem value={5}>5</MenuItem>
                      <MenuItem value={6}>6</MenuItem>
                      <MenuItem value={7}>7</MenuItem>
                      <MenuItem value={8}>8</MenuItem>
                      <MenuItem value={9}>9</MenuItem>
                      <MenuItem value={10}>10</MenuItem>
                      <MenuItem value={11}>11-15</MenuItem>
                      <MenuItem value={16}>16-20</MenuItem>
                      <MenuItem value={20}>20+</MenuItem>
                    </Select>
                  </FormControl>
                </TimelineContent>
              </TimelineItem>

              <TimelineItem className={classes.timelineItem}>
                <TimelineOppositeContent
                  style={{ flex: 0 }}
                ></TimelineOppositeContent>
                <TimelineSeparator>
                  <TimelineDot color="primary">
                    <EventIcon />
                  </TimelineDot>
                  <TimelineConnector />
                </TimelineSeparator>
                <TimelineContent>
                  <FormControl className={classes.formControl}>
                    <DatePicker
                      name="date"
                      id="date"
                      value={selectedDate}
                      onChange={handleDateChange}
                      style={{ marginTop: 15 }}
                      autoOk={true}
                      disablePast={true}
                    />
                  </FormControl>
                </TimelineContent>
              </TimelineItem>

              <TimelineItem className={classes.timelineItem}>
                <TimelineOppositeContent
                  style={{ flex: 0 }}
                ></TimelineOppositeContent>
                <TimelineSeparator>
                  <TimelineDot color="primary">
                    <ScheduleIcon />
                  </TimelineDot>
                  <TimelineConnector />
                </TimelineSeparator>
                <TimelineContent>
                  <FormControl className={classes.formControl}>
                    <TimePicker
                      name="time"
                      id="time"
                      value={selectedDate}
                      onChange={handleDateChange}
                      ampm={false}
                      style={{ marginTop: 15 }}
                      autoOk={true}
                    />
                  </FormControl>
                </TimelineContent>
              </TimelineItem>

              <TimelineItem className={classes.timelineItem}>
                <TimelineOppositeContent
                  style={{ flex: 0 }}
                ></TimelineOppositeContent>
                <TimelineSeparator>
                  <TimelineDot color="primary">
                    <PersonIcon />
                  </TimelineDot>
                  <TimelineConnector />
                </TimelineSeparator>
                <TimelineContent>
                  <FormControl className={classes.formControl}>
                    <TextField
                      type="text"
                      value={state.fullname}
                      name="fullname"
                      id="fullname"
                      label="Name"
                      placeholder="Enter your name"
                      onChange={changeHandler}
                      noValidate
                      // helperText={
                      //   error ? "Name length must be >= 2" : "Perfect!"
                      // }
                      // error={error}
                      // required
                      // minlength={2}
                      // maxlength={20}
                    />
                  </FormControl>
                </TimelineContent>
              </TimelineItem>

              <TimelineItem className={classes.timelineItem}>
                <TimelineOppositeContent
                  style={{ flex: 0 }}
                ></TimelineOppositeContent>
                <TimelineSeparator>
                  <TimelineDot color="primary">
                    <PhoneIcon />
                  </TimelineDot>
                  <TimelineConnector />
                </TimelineSeparator>
                <TimelineContent>
                  <FormControl className={classes.formControl}>
                    <TextField
                      type="text"
                      value={state.phone}
                      name="phone"
                      id="phone"
                      label="Phone"
                      onChange={changeHandler}
                      noValidate
                    />
                  </FormControl>
                </TimelineContent>
              </TimelineItem>

              <TimelineItem className={classes.timelineItem}>
                <TimelineOppositeContent
                  style={{ flex: 0 }}
                ></TimelineOppositeContent>
                <TimelineSeparator>
                  <TimelineDot color="primary">
                    <AlternateEmailIcon />
                  </TimelineDot>
                </TimelineSeparator>
                <TimelineContent>
                  <FormControl className={classes.formControl}>
                    <TextField
                      type="email"
                      value={state.email}
                      name="email"
                      id="email"
                      label="Email"
                      onChange={changeHandler}
                      noValidate
                    />
                  </FormControl>
                </TimelineContent>
              </TimelineItem>
            </Timeline>
          </MuiPickersUtilsProvider>

          <Button
            // onClick={handleClick}
            type="submit"
            variant="contained"
            color="primary"
            style={{
              position: "relative",
              left: "50%",
              transform: "translate(-50%, 0)",
            }}
          >
            Reservieren jetzt
          </Button>
        </form>
      </div>
    </Modal>
  )
}

export default ModalWindow
